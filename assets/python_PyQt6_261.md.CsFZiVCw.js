import{_ as t,c as o,o as e,a5 as a}from"./chunks/framework.DcfbuPOr.js";const p=JSON.parse('{"title":"垂直布局Vertical Layout","description":"","frontmatter":{},"headers":[],"relativePath":"python/PyQt6/261.md","filePath":"python/PyQt6/261.md"}'),d={name:"python/PyQt6/261.md"},r=a('<h1 id="垂直布局vertical-layout" tabindex="-1">垂直布局Vertical Layout <a class="header-anchor" href="#垂直布局vertical-layout" aria-label="Permalink to &quot;垂直布局Vertical Layout&quot;">​</a></h1><p><code>垂直布局Vertical Layout</code>属与线性布局，线性布局是将放入其中的组件按照垂直或水平方向来布局，也就是控制放入其中的组件横向排列或纵向排列。其中，将纵向排列的称为垂直线性布局管理器。</p><p><code>VerticalLayout</code>控件表示垂直布局，其基类是<code>QVBoxLayout</code>，它的特点是：放入该布局管理器中的控件默认垂直排列。</p><p>Layouts -&gt; Vertical Layout</p><h2 id="qvboxlayout常用方法" tabindex="-1">QVBoxLayout常用方法： <a class="header-anchor" href="#qvboxlayout常用方法" aria-label="Permalink to &quot;QVBoxLayout常用方法：&quot;">​</a></h2><table tabindex="0"><thead><tr><th><strong>成员方法</strong></th><th><strong>功 能</strong></th></tr></thead><tbody><tr><td>void QBoxLayout::addWidget(QWidget<br>*widget, int stretch = 0, Qt::Alignment<br>alignment = Qt::Alignment())</td><td>向布局管理器中添加指定的 widget 控件。<br>默认情况下，stretch 拉伸系数为 0，表示 widget 控<br>件的尺寸为默认值；alignment 是一个枚举类型参<br>数，默认值也是 0，表示该控件会填满占用的整个空<br>间。</td></tr><tr><td>void QBoxLayout::addStretch(int<br>stretch = 0)</td><td>添加一个空白行，整个窗口中除了控件占用的区域<br>外，其它区域可以由多个（≥0）空白行分摊，分摊比<br>例取余于各个空白行设置的 stretch 参数的值。<br>strech 参数的默认值为 0，表示当窗口很小时，空白<br>行可以不占据窗口空间。当窗口中包含多个 strech<br>值为 0 的空白行时，它们会平分窗口中的空白区域。</td></tr><tr><td>void QBoxLayout::addSpacing(int size)</td><td>添加一个 size 大小的固定间距。</td></tr><tr><td>void QLayout::setMargin(int margin)</td><td>设置布局管理器中所有控件的外边距，上、下、左、<br>右外边距的大小都为 margin。默认情况下，所有方<br>向的外边距为 11 px。</td></tr><tr><td>void QLayout::setContentsMargins(int<br>left, int top, int right, int bottom)</td><td>设置布局管理器中所有控件的外边距，和<br>setMargin() 的区别是，此方法可以自定义上、下、<br>左、右外边距的值。</td></tr><tr><td>void QBoxLayout::setDirection(Direction<br>direction)</td><td>设置布局管理器中控件的布局方向，Direction 是一<br>个枚举类型，对于 QVBoxLayout 布局管理器，<br>direction 参数的值通常选择<br>QBoxLayout::TopToBottom（从上到下依次摆放）<br>或者 QBoxLayout::BottomToTop（从下到上依次摆<br>放）。</td></tr><tr><td>bool QBoxLayout::setStretchFactor(QWidget *widget, int stretch)</td><td>设置布局管理器中某个控件的拉伸系数。</td></tr><tr><td>bool QBoxLayout::setStretchFactor(QLayout *layout, int stretch)</td><td>布局管理器内部可以再放置一个布局管理器，该方法<br>用来设置内部某个布局管理器的拉伸系数。</td></tr><tr><td>layoutStretch</td><td>设置布局管理器里的组件的伸缩比例</td></tr><tr><td>layoutSizeConstraint</td><td>用来约束窗体大小, 只影响窗体</td></tr></tbody></table><p><code>QLayout::SetDefaultConstraint</code> 窗体最小值被设置为 <code>minimumSize</code> 值无法再缩小, 如果 <code>QLayout</code> 内控件有更大的<code>minimumSize</code>, 则会取更大的<code>minimumSize</code></p><p><code>QLayout::SetNoConstraint</code> 窗体没有约束策略</p><p><code>QLayout::SetFixedSize</code> 窗体大小被设定为 <code>sizeHint</code> 的大小，无法改变</p><p><code>QLayout::SetMinimumSize</code> 窗体最小为 <code>minimumSize</code> 无法再缩小, 如果 <code>QLayout</code> 内控件有更小的</p><p><code>minimumSize</code> 则会取更小的<code>minimumSize</code>., 总结就是的话, 和 <code>Default</code> 不同的地方就是尽可能的小.</p><p><code>QLayout::SetMaxmumSize</code> 同理, 窗体最大值为 <code>maxmumSize</code> , 无法再放大</p><p><code>QLayout::SetMinAndMaxSize</code> 窗体最小为 <code>minimumSize</code> 无法再缩小, 窗体最大值为 <code>maxmumSize</code> , 无法再放大</p><h1 id="水平布局horizontal-layout" tabindex="-1">水平布局Horizontal Layout <a class="header-anchor" href="#水平布局horizontal-layout" aria-label="Permalink to &quot;水平布局Horizontal Layout&quot;">​</a></h1><p>HorizontalLayout控件表示水平布局，其基类是QHBoxLayout，它的特点是：放入该布局管理器中的控件默认水平排列。</p><p>水平布局的属性方法和前面讲的垂直布局基本一致。</p><p>Layouts -&gt; Horizontal Layout</p>',17),i=[r];function c(n,u,l,s,y,m){return e(),o("div",null,i)}const b=t(d,[["render",c]]);export{p as __pageData,b as default};
