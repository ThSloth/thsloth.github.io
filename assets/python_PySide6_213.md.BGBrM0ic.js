import{_ as t,c as e,o as d,a5 as r}from"./chunks/framework.DcfbuPOr.js";const o="/assets/image-14.DKBLmIUv.png",b=JSON.parse('{"title":"QTextEdit多行富文本框","description":"","frontmatter":{},"headers":[],"relativePath":"python/PySide6/213.md","filePath":"python/PySide6/213.md"}'),a={name:"python/PySide6/213.md"},i=r('<h1 id="qtextedit多行富文本框" tabindex="-1">QTextEdit多行富文本框 <a class="header-anchor" href="#qtextedit多行富文本框" aria-label="Permalink to &quot;QTextEdit多行富文本框&quot;">​</a></h1><p>QTextEdit是多行文本框控件，主要用来显示多行的文本内容，当文本内容超出控件的显示范围时，该控</p><p>件将显示垂直滚动条；另外，QTextEdit控件不仅可以显示纯文本内容，还支持显示HTML网页。</p><p>Input Widgets —&gt; Text Edit</p><table tabindex="0"><thead><tr><th><strong>方法</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>setPlainText(）</td><td>设置文本内容</td></tr><tr><td>toPlainText()</td><td>获取文本内容</td></tr><tr><td>setTextColor()</td><td>设置文本颜色，例如，将文本设置为红色，可以将该方法的参数设<br>置为QtGui.QColor(255,0,0)</td></tr><tr><td>setTextBackgroundColor()</td><td>设置文本的背景颜色，颜色参数与setTextColor()相同</td></tr><tr><td>setHtml()</td><td>设置 HTML文档内容</td></tr><tr><td>toHtml()</td><td>获取HTML文档内容</td></tr><tr><td>setLineWrapMode()</td><td>lineWrapMode：lineWrapMode属性用于控制换行模式，其类型<br>为枚举类型QTextEdit.LineWrapMode，缺省值为WidgetWidth，<br>表示以词为单位在编辑器右边换行，换行出现在空白处，保持整个<br>单词的完整性。可以调用方法lineWrapMode()、<br>setLineWrapMode(）来访问该属性。如果设置换行模式为<br>FixedPixelWidth（距离控件左侧的像素距离） 或<br>FixedColumnWidth(距离控件左侧的列距离) ，同时需要调用<br>setLineWrapColumnOrWidth()方法设置换行的像素宽度或字符数<br>宽度，这两种模式不会保持单词的完整性</td></tr><tr><td>clear()</td><td>清除所有内容</td></tr><tr><td>overwriteMode()</td><td>overwriteMode属性用于控制用户输入文本是否替换现有文本，如<br>果为True，则输入字符从当前光标位置开始逐一替换当前的字符，<br>为False则在光标处插入输入字符。缺省值为False，可以通过方法<br>overwriteMode()、setOverwriteMode(）进行访问</td></tr></tbody></table><p><img src="'+o+'" alt="alt text" loading="lazy"></p>',6),n=[i];function s(l,p,_,c,h,x){return d(),e("div",null,n)}const m=t(a,[["render",s]]);export{b as __pageData,m as default};
