import{_ as t,c as r,o as e,a5 as d}from"./chunks/framework.DcfbuPOr.js";const a="/assets/image-44.BKGwuKqG.png",u=JSON.parse('{"title":"QProgressBar进度条控件","description":"","frontmatter":{},"headers":[],"relativePath":"python/PySide6/281.md","filePath":"python/PySide6/281.md"}'),i={name:"python/PySide6/281.md"},o=d('<h1 id="qprogressbar进度条控件" tabindex="-1">QProgressBar进度条控件 <a class="header-anchor" href="#qprogressbar进度条控件" aria-label="Permalink to &quot;QProgressBar进度条控件&quot;">​</a></h1><p>QProgressBar控件表示进度条，通常在执行长时间任务时，用进度条告诉用户当前的进展情况。</p><h2 id="qprogressbar类的常用方法" tabindex="-1">QProgressBar类的常用方法 <a class="header-anchor" href="#qprogressbar类的常用方法" aria-label="Permalink to &quot;QProgressBar类的常用方法&quot;">​</a></h2><table tabindex="0"><thead><tr><th><strong>方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>setMinimum()</td><td>设置进度条的最小值，默认值为0</td></tr><tr><td>setMaximum()</td><td>设置进度条的最大值，默认值为99</td></tr><tr><td>setRange()</td><td>设置进度条的取值范围，相当于setMinimum()和 setMaximum)的结合</td></tr><tr><td>setValue()</td><td>设置进度条的当前值</td></tr><tr><td>setFormat()</td><td>设置进度条的文字显示格式，有以下3种格式。<br>%p%:显示完成的百分比，默认格式;<br>%v:显示当前的进度值;<br>%m:显示总的步长值</td></tr><tr><td>setLayoutDirection()</td><td>设置进度条的布局方向，支持以下3个方向值。<br>Qt.LeftToRight:从左至右;<br>Qt.RightToLeft:从右至左;<br>Ot.LayoutDirectionAuto:跟随布局方向自动调整</td></tr><tr><td>setAlignment()</td><td>设置对齐方式，有水平和垂直两种，分别如下。<br>◆水平对齐方式<br>Qt.AlignLeft:左对齐;<br>Qt.AlignHCenter:水平居中对齐;<br>Qt.AlignRight:右对齐;<br>Qt.AlignJustify:两端对齐;<br>◆垂直对齐方式<br>Qt.AlignTop:顶部对齐;<br>Qt.AlignVCenter:垂直居中;<br>Qt.AlignBottom:底部对齐</td></tr><tr><td>setOrientation()</td><td>设置进度条的显示方向，有以下两个方向。<br>Qt.Horizontal:水平方向;<br>Ot.Vertical:垂直方向</td></tr><tr><td>setInvertedAppearance()</td><td>设置进度条是否以反方向显示进度</td></tr><tr><td>setTextDirection()</td><td>设置进度条的文本显示方向，有以下两个方向。<br>QProgressBar.TopToBottom:从上到下;<br>QProgressBar.BottomToTop:从下到上</td></tr><tr><td>setProperty()</td><td>对进度条的属性进行设置，可以是任何属性，如：self.progressBar.setProperty(&quot;value&quot; , 24)</td></tr><tr><td>minimum()</td><td>获取进度条的最小值</td></tr><tr><td>maximum()</td><td>获取进度条的最大值</td></tr><tr><td>value()</td><td>获取进度条的当前值</td></tr></tbody></table><h1 id="qslider滑块控件" tabindex="-1">QSlider滑块控件 <a class="header-anchor" href="#qslider滑块控件" aria-label="Permalink to &quot;QSlider滑块控件&quot;">​</a></h1><p>PyQt6提供了两个滑块控件，分别是水平滑块HorizontalSlider和垂直滑块VerticalSlider，但这两个滑块控件对应的类都是QSlider类，该类提供了一个setOrientation()方法，通过设置该方法的参数，可以将滑块显示为水平或者垂直。</p><p>比如我们在设置字体大小，就可以通过滑块来动态设置显示字体，这样用户体验更好，包括头像大小等，可以用到滑块。</p><h2 id="qslider滑块类的常用方法" tabindex="-1">QSlider滑块类的常用方法 <a class="header-anchor" href="#qslider滑块类的常用方法" aria-label="Permalink to &quot;QSlider滑块类的常用方法&quot;">​</a></h2><table tabindex="0"><thead><tr><th><strong>方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>setMinimum()</td><td>设置滑块最小值</td></tr><tr><td>setMaximum()</td><td>设置滑块最大值</td></tr><tr><td>setOrientation()</td><td>设置滑块显示方向，取值如下。<br>Qt.Horizontal:水平滑块;<br>Qt.Vertical:垂直滑块</td></tr><tr><td>setPageStep()</td><td>设置步长值，通过鼠标单击滑块时使用</td></tr><tr><td>setSingleStep()</td><td>设置步长值，通过鼠标拖动滑块时使用</td></tr><tr><td>setValue()</td><td>设置滑块的值</td></tr><tr><td>setTickInterval()</td><td>设置滑块的刻度间隔</td></tr><tr><td>setTickPosition()</td><td>设置滑块刻度的标记位置，取值如下。<br>QSlider.NoTicks:不显示刻度，这是默认设置;<br>QSlider.TicksBothSides:在滑块的两侧都显示刻度;<br>QSlider.TicksAbove:在水平滑块的上方显示刻度;<br>QSlider.TicksBelow:在水平滑块的下方显示刻度;<br>QSlider.TicksLeft:在垂直滑块的左侧显示刻度;<br>QSlider.TicksRight:在垂直滑块的右侧显示刻度</td></tr><tr><td>value()</td><td>获取滑块的当前值</td></tr></tbody></table><p><img src="'+a+'" alt="alt text" loading="lazy"></p>',10),s=[o];function n(l,b,h,c,g,m){return e(),r("div",null,s)}const Q=t(i,[["render",n]]);export{u as __pageData,Q as default};
