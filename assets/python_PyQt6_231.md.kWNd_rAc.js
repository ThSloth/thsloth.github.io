import{_ as t,c as e,o,a5 as a}from"./chunks/framework.DcfbuPOr.js";const n="/assets/image-25.Dcgrg4zP.png",x=JSON.parse('{"title":"QComboBox下拉组合框","description":"","frontmatter":{},"headers":[],"relativePath":"python/PyQt6/231.md","filePath":"python/PyQt6/231.md"}'),i={name:"python/PyQt6/231.md"},r=a('<h1 id="qcombobox下拉组合框" tabindex="-1">QComboBox下拉组合框 <a class="header-anchor" href="#qcombobox下拉组合框" aria-label="Permalink to &quot;QComboBox下拉组合框&quot;">​</a></h1><p>QComboBox控件，又称为下拉组合框控件，它主要用于在下拉组合框中显示数据，用户可以从中选择项。</p><p>Input Widgets -&gt; Combo Box</p><h2 id="【read-only】count-const-int" tabindex="-1"><code>【read-only】count : const int</code> <a class="header-anchor" href="#【read-only】count-const-int" aria-label="Permalink to &quot;`【read-only】count : const int`&quot;">​</a></h2><p>组合框中的项目数。</p><h2 id="【read-only】currentdata-const-qvariant" tabindex="-1"><code>【read-only】currentData : const QVariant</code> <a class="header-anchor" href="#【read-only】currentdata-const-qvariant" aria-label="Permalink to &quot;`【read-only】currentData : const QVariant`&quot;">​</a></h2><p>当前项目的数据。</p><h2 id="currentindex-int" tabindex="-1"><code>currentIndex : int</code> <a class="header-anchor" href="#currentindex-int" aria-label="Permalink to &quot;`currentIndex : int`&quot;">​</a></h2><p>组合框中当前项目的索引。插入或删除项目时，当前索引可以更改。</p><h2 id="currenttext-qstring" tabindex="-1"><code>currentText : QString</code> <a class="header-anchor" href="#currenttext-qstring" aria-label="Permalink to &quot;`currentText : QString`&quot;">​</a></h2><p>当前文本。如果组合框是可编辑的，则当前文本是行编辑显示的值。</p><p>如果组合框是可编辑的，setCurrentText() 只会调用 setEditText()。否则，如果列表中有匹配的文本，则 currentIndex 设置为相应的索引。</p><h2 id="duplicatesenabled-bool" tabindex="-1"><code>duplicatesEnabled : bool</code> <a class="header-anchor" href="#duplicatesenabled-bool" aria-label="Permalink to &quot;`duplicatesEnabled : bool`&quot;">​</a></h2><p>可编辑时设置setSizeAdjustPolicy()将输入内容插入到组合框，是否可以在组合框中插入重复项。默认为false。</p><p>请注意，始终可以以编程方式将重复项插入组合框。</p><h2 id="editable-bool" tabindex="-1"><code>editable : bool</code> <a class="header-anchor" href="#editable-bool" aria-label="Permalink to &quot;`editable : bool`&quot;">​</a></h2><p>是否可以编辑组合框。默认为 false。编辑的效果取决于插入策略。</p><p>注意：禁用可编辑状态时，将删除验证器和完成器。</p><h2 id="iconsize-qsize" tabindex="-1"><code>iconSize : QSize</code> <a class="header-anchor" href="#iconsize-qsize" aria-label="Permalink to &quot;`iconSize : QSize`&quot;">​</a></h2><p>组合框中显示的图标的大小。这是图标可以具有的最大大小，较小尺寸的图标不会放大。</p><h2 id="insertpolicy-insertpolicy" tabindex="-1"><code>insertPolicy : InsertPolicy</code> <a class="header-anchor" href="#insertpolicy-insertpolicy" aria-label="Permalink to &quot;`insertPolicy : InsertPolicy`&quot;">​</a></h2><p>可编辑时插入的项目应出现在组合框中的位置的策略。</p><p>默认值为 InsertAtBottom，即新项目将出现在项目列表的底部。</p><h2 id="maxcount-int" tabindex="-1"><code>maxCount : int</code> <a class="header-anchor" href="#maxcount-int" aria-label="Permalink to &quot;`maxCount : int`&quot;">​</a></h2><p>组合框中允许的最大项目数。</p><p>如果将最大数量设置为小于组合框中当前项目的数量，则额外的项目将被截断。如果在组合框上设置了外部模型，这也适用。</p><h2 id="maxvisibleitems-int" tabindex="-1"><code>maxVisibleItems : int</code> <a class="header-anchor" href="#maxvisibleitems-int" aria-label="Permalink to &quot;`maxVisibleItems : int`&quot;">​</a></h2><p>组合框屏幕上允许的最大项目数。默认为 10。</p><p>对于 QStyle::SH_ComboBox_Popup 返回 true 的样式中的不可编辑组合框，将忽略此属性。</p><h2 id="minimumcontentslength-int" tabindex="-1"><code>minimumContentsLength : int</code> <a class="header-anchor" href="#minimumcontentslength-int" aria-label="Permalink to &quot;`minimumContentsLength : int`&quot;">​</a></h2><p>应适合组合框的最小字符数。默认值为 0。</p><p>如果此属性设置为正值，则 minimumSizeHint() 和 sizeHint() 会将其考虑此属性在内。</p><h2 id="modelcolumn-int" tabindex="-1"><code>modelColumn : int</code> <a class="header-anchor" href="#modelcolumn-int" aria-label="Permalink to &quot;`modelColumn : int`&quot;">​</a></h2><p>模型中可见的列。默认为 0。</p><h2 id="placeholdertext-qstring" tabindex="-1"><code>placeholderText : QString</code> <a class="header-anchor" href="#placeholdertext-qstring" aria-label="Permalink to &quot;`placeholderText : QString`&quot;">​</a></h2><p>未设置有效索引时显示的占位符文本文本。</p><p>当设置无效索引时将显示占位符文本，下拉列表中的文本不可访问。在添加项目之前调用此函数时，将显示占位符文本，否则如果要显示占位符文本，则必须以编程方式调用 setCurrentIndex(-1)。</p><p>当 QComboBox 可编辑时，请改用 lineEdit()-&gt;setPlaceholderText()。</p><h2 id="sizeadjustpolicy-sizeadjustpolicy" tabindex="-1"><code>sizeAdjustPolicy : SizeAdjustPolicy</code> <a class="header-anchor" href="#sizeadjustpolicy-sizeadjustpolicy" aria-label="Permalink to &quot;`sizeAdjustPolicy : SizeAdjustPolicy`&quot;">​</a></h2><p>内容更改时组合框大小如何更改的策略。默认值为 AdjustToContentsOnFirstShow。</p><h2 id="enum-qcombobox-insertpolicy" tabindex="-1"><code>enum QComboBox::InsertPolicy：</code> <a class="header-anchor" href="#enum-qcombobox-insertpolicy" aria-label="Permalink to &quot;`enum QComboBox::InsertPolicy：`&quot;">​</a></h2><p>此枚举指定当用户输入新字符串时 QComboBox 应该做什么。</p><p><code>NoInsert：</code>字符串不会插入组合框。</p><p><code>InsertAtTop：</code>字符串将作为组合框中的第一项插入。</p><p><code>InsertAtCurrent：</code>当前项目将被字符串替换。</p><p><code>InsertAtBottom：</code>字符串将插入组合框中的最后一项之后。</p><p><code>InsertAfterCurrent：</code>在组合框中的当前项目之后插入字符串。</p><p><code>InsertBeforeCurrent：</code>在组合框中的当前项目之前插入字符串。</p><p><code>InsertAlphabetically：</code>字符串按字母顺序插入组合框中。</p><h2 id="enum-qcombobox-sizeadjustpolicy" tabindex="-1">enum QComboBox::SizeAdjustPolicy： <a class="header-anchor" href="#enum-qcombobox-sizeadjustpolicy" aria-label="Permalink to &quot;enum QComboBox::SizeAdjustPolicy：&quot;">​</a></h2><p>此枚举指定当添加新内容或内容更改时 QComboBox 的大小提示应如何调整</p><p><code>AdjustToContents：</code>组合框将始终根据内容进行调整</p><p><code>AdjustToContentsOnFirstShow：</code>组合框将在第一次显示时调整其内容。</p><p><code>AdjustToMinimumContentsLengthWithIcon：</code>组合框将调整为 minimumContentsLength 加上图标的空间。 出于性能原因，应在大型模型上使用此策略。</p><h1 id="qcombobox类的常用方法" tabindex="-1">QComboBox类的常用方法 <a class="header-anchor" href="#qcombobox类的常用方法" aria-label="Permalink to &quot;QComboBox类的常用方法&quot;">​</a></h1><table tabindex="0"><thead><tr><th><strong>方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>addItem()</td><td>添加一个下拉列表项</td></tr><tr><td>addItems()</td><td>从列表中添加下拉选项</td></tr><tr><td>currentText()</td><td>获取选中项的文本</td></tr><tr><td>currentIndex()</td><td>获取选中项的索引</td></tr><tr><td>itemText(index)</td><td>获取索引为index的项的文本</td></tr><tr><td>setItemText(index,text)</td><td>设置索引为index的项的文本</td></tr><tr><td>count()</td><td>获取所有选项的数量</td></tr><tr><td>clear()</td><td>删除所有选项</td></tr></tbody></table><p><img src="'+n+'" alt="alt text" loading="lazy"></p>',57),d=[r];function c(l,s,h,p,u,m){return o(),e("div",null,d)}const q=t(i,[["render",c]]);export{x as __pageData,q as default};
