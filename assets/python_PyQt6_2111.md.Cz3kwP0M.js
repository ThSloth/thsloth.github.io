import{_ as t,c as d,o as e,a5 as a}from"./chunks/framework.DcfbuPOr.js";const o="/assets/image-51.BPppG53z.png",r="/assets/image-52.CPj3XU0L.png",i="/assets/image-53.CUWzJ1oy.png",l="/assets/image-54.Cz1qTXgB.png",s="/assets/image-55.CX0bw_Do.png",n="/assets/image-56.XJYejFd3.png",g="/assets/image-57.X3PtMugQ.png",F=JSON.parse('{"title":"QMessageBox对话框","description":"","frontmatter":{},"headers":[],"relativePath":"python/PyQt6/2111.md","filePath":"python/PyQt6/2111.md"}'),p={name:"python/PyQt6/2111.md"},h=a('<h1 id="qmessagebox对话框" tabindex="-1">QMessageBox对话框 <a class="header-anchor" href="#qmessagebox对话框" aria-label="Permalink to &quot;QMessageBox对话框&quot;">​</a></h1><p>对话框使用QMessageBox类表示，PyQt6内置5种不同类型的对话框，分别是消息对话框、问答对话框、警告对话框、错误对话框和关于对话框，它们的主要区别在于，弹出的对话框中的图标不同。</p><table tabindex="0"><thead><tr><th><strong>说明</strong></th><th><strong>对话框类型</strong></th></tr></thead><tbody><tr><td>QMessageBox.information()</td><td>消息对话框</td></tr><tr><td>OMessageBox.critical()</td><td>错误对话框</td></tr><tr><td>QMessageBox.question()</td><td>问答对话框</td></tr><tr><td>QMessageBox.about()</td><td>关于对话框</td></tr><tr><td>QMessageBox.warning()</td><td>警告对话框</td></tr></tbody></table><p><img src="'+o+'" alt="alt text" loading="lazy"></p><h2 id="对话框的常用按钮类型" tabindex="-1">对话框的常用按钮类型 <a class="header-anchor" href="#对话框的常用按钮类型" aria-label="Permalink to &quot;对话框的常用按钮类型&quot;">​</a></h2><table tabindex="0"><thead><tr><th><strong>按钮类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>QMessageBox.StandardButton.Ok</td><td>同意操作</td></tr><tr><td>QMessageBox.StandardButton.Apply</td><td>应用操作</td></tr><tr><td>QMessageBox.StandardButton.Ignore</td><td>忽略操作</td></tr><tr><td>QMessageBox.StandardButton.Yes</td><td>同意操作</td></tr><tr><td>QMessagcBox.StandardButton.Close</td><td>关闭操作</td></tr><tr><td>QMessageBox.StandardButton.No</td><td>取消操作</td></tr><tr><td>OMessageBox.StandardButton.Cancel</td><td>取消操作</td></tr><tr><td>OMessageBox.StandardButton.Abort</td><td>终止操作</td></tr><tr><td>OMessageBox.StandardButton.Open</td><td>打开操作</td></tr><tr><td>QMessageBox.StandardButton.Retry</td><td>重试操作</td></tr><tr><td>OMessageBox.StandardButton.Save</td><td>保存操作</td></tr></tbody></table><p>多个按钮用 &#39;|&#39; 分隔</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">QMessageBox.information(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;消息对话框标题&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;消息对话框内容&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,QMessageBox.StandardButton.Ok </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">QMessageBox.StandardButton.No)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h1 id="qfiledialog文件对话框控件" tabindex="-1">QFileDialog文件对话框控件 <a class="header-anchor" href="#qfiledialog文件对话框控件" aria-label="Permalink to &quot;QFileDialog文件对话框控件&quot;">​</a></h1><p>PyQt6中的文件对话框使用QFileDialog类表示，该类继承自QDialog类，它允许用户选择文件或者文件夹，也允许用户遍历文件系统，以便选择一个或多个文件或者文件夹。</p><h2 id="qfiledialog类的常用方法" tabindex="-1">QFileDialog类的常用方法 <a class="header-anchor" href="#qfiledialog类的常用方法" aria-label="Permalink to &quot;QFileDialog类的常用方法&quot;">​</a></h2><table tabindex="0"><thead><tr><th><strong>方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>getOpenFileName()</td><td>获取一个打开文件的文件名</td></tr><tr><td>getOpenFileNames()</td><td>获取多个打开文件的文件名</td></tr><tr><td>getSaveFileName()</td><td>获取保存的文件名</td></tr><tr><td>getExistingDirectory()</td><td>获取一个打开的文件夹</td></tr><tr><td>setAcceptMode()</td><td>设置接收模式，取值如下。<br>QFileDialog.AcceptOpen:设置文件对话框为打开模式，这是默认值;<br>OFileDialog.AcceptSave:设置文件对话框为保存模式</td></tr><tr><td>setDefaultSuffix()</td><td>设置文件对话框中的文件名的默认后缀名</td></tr><tr><td>setFileMode()</td><td>设置可以选择的文件类型，取值如下。<br>QFileDialog.FileMode.AnyFile:任意文件(无论文件是否存在）﹔<br>QFileDialog.FileMode.ExistingFile:已存在的文件;<br>QFileDialog.FileMode.ExistingFiles:已存在的多个文件;<br>QFileDialog.FileMode.Directory:文件夹;<br>QFileDialog.FileMode.DirectoryOnly:文件夹（选择时只能选中文件夹)</td></tr><tr><td>setDirectory()</td><td>设置文件对话框的默认打开位置</td></tr><tr><td>setNameFilter()</td><td>设置名称过滤器，多个类型的过滤器之间用两个分号分割（例如:所有文件(.);Python文件(.py))﹔而一个过滤器中如果有多种格式，可以用空格分割(例如:图片文件(.jpg .png.bmp))</td></tr><tr><td>setViewMode()</td><td>设置显示模式，取值如下。<br>QFileDialog.Detail:显示文件详细信息，包括文件名、大小、日期等信息;<br>QFileDialog.List:以列表形式显示文件名</td></tr><tr><td>selectedFile()</td><td>获取选择的一个文件或文件夹名字</td></tr><tr><td>selectedFiles()</td><td>获取选择的多个文件或文件夹名字</td></tr></tbody></table><h1 id="qinputdialog输入对话框控件" tabindex="-1">QInputDialog输入对话框控件 <a class="header-anchor" href="#qinputdialog输入对话框控件" aria-label="Permalink to &quot;QInputDialog输入对话框控件&quot;">​</a></h1><p>QInputDialog类表示一个标准的输入对话框，该对话框由一个文本框（或者数字选择框，或者下拉列表框）和两个按钮（OK按钮和Cancel按钮）组成，它可以与用户进行简单的交互，例如，在主窗口中获取输入对话框中输入或者选择的值。</p><p>QInputDialog类的常用方法：</p><h2 id="gettext-方法的参数及返回值" tabindex="-1">getText()方法的参数及返回值 <a class="header-anchor" href="#gettext-方法的参数及返回值" aria-label="Permalink to &quot;getText()方法的参数及返回值&quot;">​</a></h2><p>getText()方法，显示一个用于输入字符串的文本编辑框。</p><table tabindex="0"><thead><tr><th><strong>参数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>QWidget</td><td>父窗口对象</td></tr><tr><td>dglTitle</td><td>QInputDialog的标题</td></tr><tr><td>txtLabel</td><td>QInputDialog内部显示的文本</td></tr><tr><td>echoMode</td><td>文本编辑框内容的显示方式</td></tr><tr><td>defaultlnput</td><td>文本编辑框默认显示内容</td></tr><tr><td>返回值</td><td>一个元组，其中text表示文本编辑框内的字符串，flag表示是否正常返回</td></tr></tbody></table><p><img src="'+r+'" alt="alt text" loading="lazy"></p><h2 id="getitem-方法的参数及返回值" tabindex="-1">getItem()方法的参数及返回值 <a class="header-anchor" href="#getitem-方法的参数及返回值" aria-label="Permalink to &quot;getItem()方法的参数及返回值&quot;">​</a></h2><p>getItem()方法，显示一个ComboBox下拉列表控件，用户可从中选择数据z</p><table tabindex="0"><thead><tr><th><strong>参数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>QWidget</td><td>父窗口对象</td></tr><tr><td>dglTitle</td><td>QInputDialog的标题</td></tr><tr><td>txtLabel</td><td>QlnputDialog内部显示的文本</td></tr><tr><td>items</td><td>ComboBox组件的内容列表</td></tr><tr><td>curIndex</td><td>默认显示ComboBox 组件哪一个索引的内容</td></tr><tr><td>editable</td><td>ComboBox组件是否可被编辑</td></tr><tr><td>返回值</td><td>一个元组，其中 text 表示从ComboBox下拉列表中选择的内容，flag表示是否正常返回</td></tr></tbody></table><p><img src="'+i+'" alt="alt text" loading="lazy"></p><h2 id="getint-方法的参数及返回值" tabindex="-1">getInt()方法的参数及返回值 <a class="header-anchor" href="#getint-方法的参数及返回值" aria-label="Permalink to &quot;getInt()方法的参数及返回值&quot;">​</a></h2><p>getInt()方法。显示一个用于输入整数的编辑框，显示的是SpinBox控件。</p><table tabindex="0"><thead><tr><th><strong>参数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>QWidget</td><td>父窗口对象</td></tr><tr><td>dglTitle</td><td>QInputDialog的标题</td></tr><tr><td>txtLabel</td><td>QInputDialog内部显示的文本</td></tr><tr><td>defaultValue</td><td>SpinBox控件默认值</td></tr><tr><td>minValue</td><td>SpinBox控件最小值</td></tr><tr><td>maxValue</td><td>SpinBox控件最大值</td></tr><tr><td>stepValue</td><td>SpinBox控件单步值</td></tr><tr><td>返回值</td><td>一个元组，其中 inputValue表示SpinBox中选择的整数值，flag表示是否正常返回</td></tr></tbody></table><p><img src="'+l+'" alt="alt text" loading="lazy"></p><h2 id="getdouble-方法的参数及返回值" tabindex="-1">getDouble()方法的参数及返回值 <a class="header-anchor" href="#getdouble-方法的参数及返回值" aria-label="Permalink to &quot;getDouble()方法的参数及返回值&quot;">​</a></h2><p>getDouble()方法。显示一个用于输入浮点数的编辑框，显示的是DoubleSpinBox控件。</p><table tabindex="0"><thead><tr><th><strong>参数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>QWidget</td><td>父窗口对象</td></tr><tr><td>dglTitle</td><td>QInputDialog的标题</td></tr><tr><td>txtLabel</td><td>QInputDialog内部显示的文本</td></tr><tr><td>defaultValue</td><td>DoubleSpinBox控件默认值</td></tr><tr><td>minValue</td><td>DoubleSpinBox控件最小值</td></tr><tr><td>maxValue</td><td>DoubleSpinBox控件最大值</td></tr><tr><td>decimals</td><td>DoubleSpinBox控件显示的小数点位数控制</td></tr><tr><td>返回值</td><td>一个元组，其中 inputValue表示DoubleSpinBox中选择的小数值，flag 表示是否正常返回</td></tr></tbody></table><p><img src="'+s+'" alt="alt text" loading="lazy"></p><h1 id="qfontdialog字体对话框控件" tabindex="-1">QFontDialog字体对话框控件 <a class="header-anchor" href="#qfontdialog字体对话框控件" aria-label="Permalink to &quot;QFontDialog字体对话框控件&quot;">​</a></h1><p>QFontDialog类表示字体对话框，用户可以从中选择字体的大小、样式、格式等信息，类似Word中的字体对话框。</p><p>QFontDialog类最常用的方法是getFont()方法，用来获取在字体对话框中选择的字体相关的信息。</p><p>该方法的返回值包含一个QFont对象和一个标识，其中，QFont对象直接存储字体相关的信息，而标识用来确定是否正常返回，即是否单击了字体对话框中的OK按钮。</p><p><img src="'+n+'" alt="alt text" loading="lazy"></p><h1 id="qcolordialog颜色对话框控件" tabindex="-1">QColorDialog颜色对话框控件 <a class="header-anchor" href="#qcolordialog颜色对话框控件" aria-label="Permalink to &quot;QColorDialog颜色对话框控件&quot;">​</a></h1><p>QColorDialog类表示颜色对话框，用户可以从中选择颜色。QColorDialog类最常用的方法是getColor()方法，用来获取在颜色对话框中选择的颜色信息。</p><p><img src="'+g+'" alt="alt text" loading="lazy"></p>',39),b=[h];function u(x,c,m,Q,B,D){return e(),d("div",null,b)}const k=t(p,[["render",u]]);export{F as __pageData,k as default};
