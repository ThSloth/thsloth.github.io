import{_ as t,c as e,o as d,a5 as r}from"./chunks/framework.DcfbuPOr.js";const Q=JSON.parse('{"title":"QTableWidget表格控件","description":"","frontmatter":{},"headers":[],"relativePath":"python/PyQt6/2112.md","filePath":"python/PyQt6/2112.md"}'),a={name:"python/PyQt6/2112.md"},i=r('<h1 id="qtablewidget表格控件" tabindex="-1">QTableWidget表格控件 <a class="header-anchor" href="#qtablewidget表格控件" aria-label="Permalink to &quot;QTableWidget表格控件&quot;">​</a></h1><p>PyQt6提供了两种表格控件，分别是TableWidget和TableView，其中，TableView是基于模型的，它是TableWidget的父类，使用TableView时，首先需要建立模型，然后再保存数据；而TableWidget是</p><p>TableView的升级版本，它已经内置了一个数据存储模型QTableWidgetItem，我们在使用时，不必自己建立模型，而直接使用setItem()方法即可添加数据。所以在实际开发时，推荐使用TableWidget控件作</p><p>为表格。</p><p>由于QTableWidget类继承自QTableView，因此，它具有QTableView的所有公共方法，另外，它还提供了一些自身特有的方法。</p><h2 id="qtablewidget类的常用方法" tabindex="-1">QTableWidget类的常用方法 <a class="header-anchor" href="#qtablewidget类的常用方法" aria-label="Permalink to &quot;QTableWidget类的常用方法&quot;">​</a></h2><table tabindex="0"><thead><tr><th><strong>方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>setRowCount()</td><td>设置表格的行数</td></tr><tr><td>setColumnCount()</td><td>设置表格的列数</td></tr><tr><td>setHorizontalHeaderLabels()</td><td>设置表格中的水平标题名称</td></tr><tr><td>setVerticalHeaderLabels()</td><td>设置表格中的垂直标题名称</td></tr><tr><td>setltem()</td><td>设置每个单元格中的内容</td></tr><tr><td>setCellWidget()</td><td>设置单元格的内容为QWidget控件</td></tr><tr><td>resizeColumnsToContents()</td><td>使表格的列的宽度跟随内容改变</td></tr><tr><td>resizeRowsToContents()</td><td>使表格的行的高度跟随内容改变</td></tr><tr><td>setEditTriggers()</td><td>设置表格是否可以编辑，取值如下。<br>QAbstractltem View.NoEditTriggers0No:不能编辑表格内容;<br>QAbstractItemView.CurrentChanged1Editing:允许对单元格进行编辑;<br>QAbstractItemView.DoubleClicked2Editing:双击时可以编辑单元格;<br>QAbstractItemView.SelectedClicked4Editing:单击时可以编辑单元格;<br>QAbstractItemView.EditKeyPressed8Editing:按修改键时可以编辑单元格;<br>QAbstractItemView.AnyKeyPressed16Editing:按任意键都可以编辑单元格</td></tr><tr><td>setSpan()</td><td>合并单元格，该方法的4个参数如下。<br>row:要改变的单元格的行索引;<br>column:要改变的单元格的列索引;<br>rowSpanCount:需要合并的行数;<br>columnSpanCount:需要合并的列数</td></tr><tr><td>setShowGrid()</td><td>设置是否显示网格线，默认不显示</td></tr><tr><td>setSelectionBehavior()</td><td>设置表格的选择行为，取值如下。<br>QAbstractItemView.SelectItemsOSelecting:选中当前单元格;<br>QAbstractItemView.SelectRows1Selecting:选中整行;<br>QAbstractItem View.DoubleClicked2Editing:选中整列</td></tr><tr><td>setTextAlignment()</td><td>设置单元格内文字的对齐方式，取值如下。<br>Qt.AlignLeft:与单元格左边缘对齐;<br>Qt.AlignRight:与单元格右边缘对齐;<br>Qt.AlignHCenter:单元格内水平居中对齐;<br>Qt.AlignJustify:单元格内两端对齐;<br>Qt.AlignTop:与单元格顶部边缘对齐;<br>Qt.AlignBottom:与单元格底部边缘对齐;<br>Ot.Align VCenter:单元格内垂直居中对齐</td></tr><tr><td>setAlternatingRowColors()</td><td>设置表格颜色交错显示</td></tr><tr><td>setColumnWidth()</td><td>设置单元格的宽度</td></tr><tr><td>setRowHeight()</td><td>设置单元格的高度</td></tr><tr><td>sortItems()</td><td>设置单元格内容的排序方式，取值如下。<br>Qt.DescendingOrder:降序;<br>Qt.AscendingOrder:升序</td></tr><tr><td>rowCount()</td><td>获取表格中的行数</td></tr><tr><td>columnCount()</td><td>获取表格中的列数</td></tr><tr><td>verticalHeader()</td><td>获取表格的垂直标题头</td></tr><tr><td>horizontalHeader()</td><td>获取表格的水平标题头</td></tr></tbody></table><h2 id="qtablewidgetitem类的常用方法" tabindex="-1">QTableWidgetItem类的常用方法 <a class="header-anchor" href="#qtablewidgetitem类的常用方法" aria-label="Permalink to &quot;QTableWidgetItem类的常用方法&quot;">​</a></h2><p>QTableWidgetItem类表示QTableWidget中的单元格，一个表格就是由多个单元格组成的。</p><table tabindex="0"><thead><tr><th><strong>方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>setText()</td><td>设置单元格的文本</td></tr><tr><td>setCheckState()</td><td>设置指定单元格的选中状态，取值如下。<br>Qt.Checked:单元格选中;<br>Qt.Unchecked:单元格未选中</td></tr><tr><td>setIcon()</td><td>为单元格设置图标</td></tr><tr><td>setBackground()</td><td>设置单元格的背景色</td></tr><tr><td>setForeground()</td><td>设置单元格内文本的颜色</td></tr><tr><td>setFont()</td><td>设置单元格内文本的字体</td></tr><tr><td>text()</td><td>获取单元格的文本</td></tr></tbody></table>',10),n=[i];function o(l,s,b,g,c,h){return d(),e("div",null,n)}const T=t(a,[["render",o]]);export{Q as __pageData,T as default};
