import{_ as t,c as d,o as r,a5 as o}from"./chunks/framework.DcfbuPOr.js";const g=JSON.parse('{"title":"网格布局Grid Layout","description":"","frontmatter":{},"headers":[],"relativePath":"python/PyQt6/262.md","filePath":"python/PyQt6/262.md"}'),a={name:"python/PyQt6/262.md"},e=o('<h1 id="网格布局grid-layout" tabindex="-1">网格布局Grid Layout <a class="header-anchor" href="#网格布局grid-layout" aria-label="Permalink to &quot;网格布局Grid Layout&quot;">​</a></h1><p>网格控件的基类是QGridLayout。QGridLayout 类将控件放置到网格中布局，它本身会从父窗口或父布局中占据尽可能多的界面空间，然后把自己的空间划分为行和列，再把每个控件塞到设置好的一个或多个单元格中。</p><p>Layouts -&gt; Grid Layout</p><h2 id="qgridlayout网格控件的常用方法" tabindex="-1">QGridLayout网格控件的常用方法： <a class="header-anchor" href="#qgridlayout网格控件的常用方法" aria-label="Permalink to &quot;QGridLayout网格控件的常用方法：&quot;">​</a></h2><table tabindex="0"><thead><tr><th><strong>方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>addwidget (Qwidget widget，int row,int column，<br>Qt.Alignmentalignment)</td><td>添加控件，主要参数说明如下。<br>widget:要添加的控件;<br>row:添加控件的行数;<br>column:添加控件的列数;<br>alignment:控件的对齐方式</td></tr><tr><td>addWidget ( QWidget widget,int fromRow，int fromColumn,int<br>rowSpan, int columnSpan, Qt.Alignment alignment)</td><td>跨行和列添加控件，主要参数说明如下。<br>widget:要添加的控件;<br>fromRow:添加控件的起始行数;<br>fromColumn:添加控件的起始列数;<br>rowSpan:控件跨越的行数;<br>columnSpan:控件跨越的列数;<br>alignment:控件的对齐方式</td></tr><tr><td>setRowStretch()</td><td>设置行比例</td></tr><tr><td>setColumnStretch()</td><td>设置列比例</td></tr><tr><td>setSpacing()</td><td>设置控件在水平和垂直方向上的间距</td></tr></tbody></table><h1 id="表单布局form-layout" tabindex="-1">表单布局Form Layout <a class="header-anchor" href="#表单布局form-layout" aria-label="Permalink to &quot;表单布局Form Layout&quot;">​</a></h1><p>FormLayout控件表示表单布局，它的基类是QFormLayout，该控件以表单方式进行布局。</p><p>表单是一种网页中常见的与用户交互的方式，其主要由两列组成，第一列用来显示信息，给用户提示，而第二列需要用户进行输入或者选择</p><h2 id="qformlayout常用方法" tabindex="-1">QFormLayout常用方法 <a class="header-anchor" href="#qformlayout常用方法" aria-label="Permalink to &quot;QFormLayout常用方法&quot;">​</a></h2><table tabindex="0"><thead><tr><th><strong>方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>addRow()</td><td>添加行</td></tr><tr><td>insertRow()</td><td>插入行</td></tr><tr><td>removeRow()</td><td>删除行</td></tr><tr><td>getWidgetPosition()</td><td>获取控件位置</td></tr><tr><td>getLayoutPosition()</td><td>获取容器管理器位置</td></tr><tr><td>rowCount()</td><td>获取行的总个数</td></tr><tr><td>setLayout()</td><td>设置布局管理器的位置</td></tr><tr><td>setWidget()</td><td>修改控件位置</td></tr><tr><td>takeRow()</td><td>移除行但并不删除子控件</td></tr><tr><td>labelForField()</td><td>标签操作</td></tr><tr><td>setRowWrapPolicy()</td><td>设置行的包装策略</td></tr><tr><td>rowWrapPolicy()</td><td>获取行的包装策略</td></tr><tr><td>setFormAlignment()</td><td>对其方式，对整个表单进行设置</td></tr><tr><td>setLabelAlignment()</td><td>对其方式，对标签(左侧区域)进行设置</td></tr><tr><td>formAlignment()</td><td>对其方式，获取整个表单的对齐方式</td></tr><tr><td>labelAlignment()</td><td>对其方式，获取标签布局标签(左侧)侧的对齐方式</td></tr><tr><td>setFieldGrowthPolicy()</td><td>设置字段增长策略</td></tr><tr><td>fieldGrowthPolicy()</td><td>获取字段增长策略</td></tr></tbody></table>',10),n=[e];function i(l,s,m,u,h,y){return r(),d("div",null,n)}const b=t(a,[["render",i]]);export{g as __pageData,b as default};
